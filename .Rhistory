library(canvasquizzeR)
?create_quizdf_zip
?is.na
path.package("canvasquizzeR")
outfile <- "quiz"
outfile_pdf <- sprintf("%s/%s.pdf", path.package("canvasquizzeR"), outfile)
markdown_file <- sprintf("%s/quiz-generate.Rmd", path.package("canvasquizzeR"))
outfolder <- "~/Downloads"
outfile_pdf <- sprintf("%s/%s.pdf", outfolder, outfile)
outfolder[-1]
outfolder[1]
?stringr::str_sub
stringr::str_sub(outfolder,-2,-1)
stringr::str_sub(outfolder,-1,-1)
if(stringr::str_sub(outfolder, -1,-1)!="/") {
outfolder <- paste0(outfolder, "/")
}
outfile_pdf <- sprintf("%s%s.pdf", outfolder, outfile)
markdown_file <- sprintf("%s/quiz-generate.Rmd", path.package("canvasquizzeR"))
outfile_pdf <- sprintf("%s.pdf", outfile)
?rmarkdown::render
paste0(path.package('canvasquizzeR'),'quiz-template.tex')
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, results="asis")
set.seed(params$seed)
df <- params$quiz.df
#' Test if the string str is NA, empty, or literally equal to "NA"
is_str_empty_singlestr <- function(str) {
if(is.null(str)) return(TRUE)
if(is.na(str)) return(TRUE)
if(str_squish(as.character(str)) == "") return(TRUE)
if(str_trim(as.character(str))=="NA") return(TRUE)
return(FALSE)
}
str <- " Hi"
if(is.null(str))
"h"
is.null(str)
is.na(str)
str_squish(as.character(str))
stringr::str_squish(as.character(str))
str_trim(as.character(str))=="NA")
str_trim(as.character(str))
stringr::str_trim(as.character(str))
length(str)
sapply
?sapply
str_replace_all
stringr::str_replace_all
str_match_all
stringr::str_match_all
str_replace
?sample
tidyr::filter
tidyverse::filter
?unique
build()
devtools::build()
devtools::install()
devtools::install()
devtools::build()
devtools::install()
roxygen2::roxygenise()
install.packages("stringr")
install.packages("stringr")
devtools::build()
devtools::install()
roxygen2::roxygenise()
devtools::install()
?rmarkdown::render
devtools::install()
devtools::build()
devtools::install()
install.packages("stringr")
install.packages("stringr")
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
paste0(path.package('canvasquizzeR'),'quiz-template.tex')
paste0(path.package("canvasquizzeR"),'quiz-template.tex')
paste0(path.package('canvasquizzeR'),'quiz-template.tex')
path.package("canvasquizzeR")
library(canvasquizzeR)
path.package("canvasquizzeR")
file.path
file.path(path.package("canvasquizzeR"))
path.package("canvasquizzeR")
paste0(path.package('canvasquizzeR'),'quiz-template.tex')
devtools::build()
devtools::install()
paste0(path.package('canvasquizzeR'),'/quiz-template.tex')
devtools::build()
devtools::install()
template_file <- paste0(path.package("canvasquizzeR"))
template_file <- paste0(path.package("canvasquizzeR"), "/inst/rmarkdown/templates/quiz-template.tex")
template_file
devtools::build()
devtools::install()
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, results="asis")
set.seed(params$seed)
df <- params$quiz.df
params$template
?pdf_document
?rmarkdown::render
output:
pdf_document:
template: "`r params$template`"
devtools::build()
devtools::install()
devtools::build()
devtools::install()
install.packages("stringr")
install.packages("stringr")
devtools::build()
devtools::install()
devtools::build()
devtools::install()
template_file <- paste0(path.package("canvasquizzeR"), "/inst/rmarkdown/templates/quiz-template.tex")
devtools::build()
devtools::install()
devtools::install()
install.packages("stringr")
install.packages("stringr")
devtools::build()
devtools::install()
template_file
template_file <- "/home/murraylax/R/x86_64-pc-linux-gnu-library/4.2/canvasquizzeR/rmarkdown/templates/quiz-template.tex"
rmarkdown::pdf_document(template=template_file, keep_md=TRUE, keep_tex=TRUE)
output_format = rmarkdown::pdf_document(template=template_file, keep_md=TRUE, keep_tex=TRUE)
?pdf_document
devtools::build()
devtools::install()
devtools::build()
devtools::install()
?rmarkdown::render
devtools::build()
devtools::install()
devtools::build(); devtools::install()
devtools::build(); devtools::install()
install.packages("stringr")
install.packages("stringr")
devtools::build(); devtools::install()
?rmarkdown::output_format
devtools::build(); devtools::install()
devtools::build(); devtools::install()
?knitr_options
devtools::build(); devtools::install()
?pandoc_options
devtools::build(); devtools::install()
devtools::build(); devtools::install()
devtools::build()
devtools::build()
devtools::build(); devtools::install()
install.packages("stringr")
install.packages("stringr")
devtools::build(); devtools::install()
devtools::build(); devtools::install()
devtools::build(); devtools::install()
template_arg[1] <- "--template"
devtools::build(); devtools::install()
as.numeric("4")
any(names(df)=="Choice 1")
names(df)
as.numeric(NA)
?readr::read_csv
?readxl::read_excel
devtools::build();
devtools::install()
devtools::install()
"hello.world"
str_replace_all("hello.world", ".", " ")
stringr::str_replace_all("hello.world", ".", " ")
stringr::str_replace_all("hello.world", "\.", " ")
stringr::str_replace_all("hello.world", "\\.", " ")
?drive_download
devtools::build()
devtools::install()
devtools::install()
devtools::build()
roxygen2::roxygenise()
devtools::build()
devtools::install()
library(canvasquizzeR)
?read_quiz_googledoc
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
devtools::install()
devtools::build()
roxygen2::roxygenise()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
as.numeric("")
devtools::build()
devtools::install()
?read_quiz_docx
devtools::build()
roxygen2::roxygenise()
devtools::install()
devtools::build()
roxygen2::roxygenise()
devtools::build()
roxygen2::roxygenise()
devtools::build()
devtools::install()
?read_quiz_googledoc
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
library(tidyverse)
library(canvasquizzeR)
library(WriteXLS)
library(rmarkdown)
library(googledrive)
title <- "Test Out Exam 1"
outfolder <- "./"
filename <- "new_eco305exam1.zip"
doc_url <- "https://docs.google.com/document/d/13yNQw5uc5De-uVVeWgls9q2AisRaFSxYe1pOy0LvlTU"
qti.df <- read_quiz_googledoc(doc_url)
df <- slice(qti.df, 1)
View(df)
# Get all the columns given in df
quizcols <- colnames(df)
quizcols
magrittr::is_in("Points", quizcols)
is_str_empty <- function(s) {
s <- as.character(s)
if(is.na(s)) return(TRUE)
if(is.null(s)) return(TRUE)
if(!is.character(s)) return(TRUE)
if(stringr::str_squish(s)=="") return(TRUE)
return(FALSE)
}
!is_str_empty(df$Points[qn])
qn <- 1
!is_str_empty(df$Points[qn])
pts <- as.character(df$Points[qn])
df <- qti.df
all_groups <- unique(df$G)
groupi <- all_groups[1]
# Identify rows in df associated with group
group_questions_rows <- which(df$G==groupi)
q <- group_questions_rows[1]
qn <- q
# Get all the columns given in df
quizcols <- colnames(df)
quizcols
magrittr::is_in("Points", quizcols)
!is_str_empty(df$Points[qn])
if(magrittr::is_in("Points", quizcols) & !is_str_empty(df$Points[qn])) {
pts <- as.character(df$Points[qn])
} else {
pts <- "1"
}
df.group <- slice(df,group_questions_rows)
points_per_question <- max(df.group$Points)
points_per_question <- as.character(as.numeric(max(df.group$Points)))
?slice
library(canvasquizzeR)
```
quiz.df <- read_quiz_googlesheet("https://docs.google.com/spreadsheets/d/1RId5A2774_EC45u60UKOnbvGOg8x1brraJUFJaacmik/")
library(googlesheets4)
?read_sheet
#'
#' @param na Same as the `na` parameter passed to `googlesheets4::read_sheet()`. Default is "". Character vector of strings to interpret as missing values. By default, blank cells are treated as missing data.
#'
#' @param trim_ws Same as the `trim_ws` parameter passed to `googlesheets4::read_sheet()`. Logical, default is TRUE. Should leading and trailing whitespace be trimmed from cell contents?
#'
#' @param skip Same as the `skip` parameter passed to `googlesheets4::read_sheet()`. Default is 0. Minimum number of rows to skip before reading anything, be it column names or data. Leading empty rows are automatically skipped, so this is a lower bound. Ignored if range is given.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googlesheet <- function(sheet_url, noauth=FALSE, sheet = NULL, range = NULL, na = "", trim_ws = TRUE, skip = 0) {
df <- googlesheets4::read_sheet(sheet_url, sheet=sheet, range=range, na=na, trim_ws=trim_ws, skip=skip)
df <- quiz_format(df)
return(df)
}
quiz.df <- read_quiz_googlesheet("https://docs.google.com/spreadsheets/d/1RId5A2774_EC45u60UKOnbvGOg8x1brraJUFJaacmik/", noauth=TRUE)
#'
#' @param na Same as the `na` parameter passed to `googlesheets4::read_sheet()`. Default is "". Character vector of strings to interpret as missing values. By default, blank cells are treated as missing data.
#'
#' @param trim_ws Same as the `trim_ws` parameter passed to `googlesheets4::read_sheet()`. Logical, default is TRUE. Should leading and trailing whitespace be trimmed from cell contents?
#'
#' @param skip Same as the `skip` parameter passed to `googlesheets4::read_sheet()`. Default is 0. Minimum number of rows to skip before reading anything, be it column names or data. Leading empty rows are automatically skipped, so this is a lower bound. Ignored if range is given.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googlesheet <- function(sheet_url, noauth=FALSE, sheet = NULL, range = NULL, na = "", trim_ws = TRUE, skip = 0) {
if(noauth) {
gs4_deauth()
}
df <- googlesheets4::read_sheet(sheet_url, sheet=sheet, range=range, na=na, trim_ws=trim_ws, skip=skip)
df <- quiz_format(df)
return(df)
}
quiz.df <- read_quiz_googlesheet("https://docs.google.com/spreadsheets/d/1RId5A2774_EC45u60UKOnbvGOg8x1brraJUFJaacmik/", noauth=TRUE)
quiz.df <- read_quiz_googlesheet("https://docs.google.com/spreadsheets/d/1RId5A2774_EC45u60UKOnbvGOg8x1brraJUFJaacmik/", noauth=TRUE)
#'
#' @param na Same as the `na` parameter passed to `googlesheets4::read_sheet()`. Default is "". Character vector of strings to interpret as missing values. By default, blank cells are treated as missing data.
#'
#' @param trim_ws Same as the `trim_ws` parameter passed to `googlesheets4::read_sheet()`. Logical, default is TRUE. Should leading and trailing whitespace be trimmed from cell contents?
#'
#' @param skip Same as the `skip` parameter passed to `googlesheets4::read_sheet()`. Default is 0. Minimum number of rows to skip before reading anything, be it column names or data. Leading empty rows are automatically skipped, so this is a lower bound. Ignored if range is given.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googlesheet <- function(sheet_url, noauth=FALSE, sheet = NULL, range = NULL, na = "", trim_ws = TRUE, skip = 0) {
if(noauth) {
gs4_deauth()
}
df <- googlesheets4::read_sheet(sheet_url, sheet=sheet, range=range, na=na, trim_ws=trim_ws, skip=skip)
df <- quiz_format(df)
return(df)
}
quiz.df <- read_quiz_googlesheet("https://docs.google.com/spreadsheets/d/1RId5A2774_EC45u60UKOnbvGOg8x1brraJUFJaacmik/", noauth=TRUE)
```
quiz.df <- read_quiz_docx("examplequiz.docx")
quiz.df <- read_quiz_docx("examplequiz.docx")
quiz.df <- read_quiz_googledoc("https://docs.google.com/document/d/1R7aiSYbtNroZ4-pZk_gRoFgsthKH-dMQs7xS2jep51Q")
#'
#' @param noauth Logical, default is FALSE. Set equal to TRUE if the spreadsheet is accessible without Google login authorization and you would like to skip the login. Turns off authorization using `googlesheets4::gs4_deauth()`.
#'
#' @param tbl_number If there is more than one table in the file, specify the table number you would like to import. Default is 1.
#'
#' @param overwrite The function has the side effect of saving the Google Doc as a Word .docx file. If the .docx file already exists, set to TRUE or FALSE to overwrite the .docx file. The default is equal to TRUE.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googledoc <- function(doc_url, noauth=FALSE, tbl_number=1, overwrite=TRUE) {
if(noauth) {
gs4_deauth()
}
metafile <- googledrive::drive_download(doc_url, overwrite=overwrite)
filepath <- metafile$local_path[1]
df <- read_quiz_docx(filepath, tbl_number)
return(df)
}
quiz.df <- read_quiz_googledoc("https://docs.google.com/document/d/1R7aiSYbtNroZ4-pZk_gRoFgsthKH-dMQs7xS2jep51Q", noauth=TRUE)
#'
#' @param noauth Logical, default is FALSE. Set equal to TRUE if the spreadsheet is accessible without Google login authorization and you would like to skip the login. Turns off authorization using `googlesheets4::gs4_deauth()`.
#'
#' @param tbl_number If there is more than one table in the file, specify the table number you would like to import. Default is 1.
#'
#' @param overwrite The function has the side effect of saving the Google Doc as a Word .docx file. If the .docx file already exists, set to TRUE or FALSE to overwrite the .docx file. The default is equal to TRUE.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googledoc <- function(doc_url, noauth=FALSE, tbl_number=1, overwrite=TRUE) {
if(noauth) {
googledrive::drive_deauth()
}
metafile <- googledrive::drive_download(doc_url, overwrite=overwrite)
filepath <- metafile$local_path[1]
df <- read_quiz_docx(filepath, tbl_number)
return(df)
}
#'
#' @param na Same as the `na` parameter passed to `googlesheets4::read_sheet()`. Default is "". Character vector of strings to interpret as missing values. By default, blank cells are treated as missing data.
#'
#' @param trim_ws Same as the `trim_ws` parameter passed to `googlesheets4::read_sheet()`. Logical, default is TRUE. Should leading and trailing whitespace be trimmed from cell contents?
#'
#' @param skip Same as the `skip` parameter passed to `googlesheets4::read_sheet()`. Default is 0. Minimum number of rows to skip before reading anything, be it column names or data. Leading empty rows are automatically skipped, so this is a lower bound. Ignored if range is given.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googlesheet <- function(sheet_url, noauth=FALSE, sheet = NULL, range = NULL, na = "", trim_ws = TRUE, skip = 0) {
if(noauth) {
googlesheets4::gs4_deauth()
}
df <- googlesheets4::read_sheet(sheet_url, sheet=sheet, range=range, na=na, trim_ws=trim_ws, skip=skip)
df <- quiz_format(df)
return(df)
}
#'
#' @param noauth Logical, default is FALSE. Set equal to TRUE if the spreadsheet is accessible without Google login authorization and you would like to skip the login. Turns off authorization using `googledrive::deauth()`.
#'
#' @param tbl_number If there is more than one table in the file, specify the table number you would like to import. Default is 1.
#'
#' @param overwrite The function has the side effect of saving the Google Doc as a Word .docx file. If the .docx file already exists, set to TRUE or FALSE to overwrite the .docx file. The default is equal to TRUE.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googledoc <- function(doc_url, noauth=FALSE, tbl_number=1, overwrite=TRUE) {
if(noauth) {
googledrive::drive_deauth()
}
metafile <- googledrive::drive_download(doc_url, overwrite=overwrite)
filepath <- metafile$local_path[1]
df <- read_quiz_docx(filepath, tbl_number)
return(df)
}
quiz.df <- read_quiz_googledoc("https://docs.google.com/document/d/1R7aiSYbtNroZ4-pZk_gRoFgsthKH-dMQs7xS2jep51Q", noauth=TRUE)
#'
#' @param noauth Logical, default is FALSE. Set equal to TRUE if the spreadsheet is accessible without Google login authorization and you would like to skip the login. Turns off authorization using `googledrive::deauth()`.
#'
#' @param tbl_number If there is more than one table in the file, specify the table number you would like to import. Default is 1.
#'
#' @param overwrite The function has the side effect of saving the Google Doc as a Word .docx file. If the .docx file already exists, set to TRUE or FALSE to overwrite the .docx file. The default is equal to TRUE.
#'
#' @return Quiz data frame with the columns above
#'
#' @export
read_quiz_googledoc <- function(doc_url, noauth=FALSE, tbl_number=1, overwrite=TRUE) {
if(noauth) {
googledrive::drive_deauth()
}
metafile <- googledrive::drive_download(doc_url, overwrite=overwrite)
filepath <- metafile$local_path[1]
df <- read_quiz_docx(filepath, tbl_number)
return(df)
}
quiz.df <- read_quiz_googledoc("https://docs.google.com/document/d/1R7aiSYbtNroZ4-pZk_gRoFgsthKH-dMQs7xS2jep51Q", noauth=TRUE)
library(canvasquizzeR)
devtools::build_manual()
?devtools::build_manual
devtools::build_readme()
devtools::build_readme()
?devtools::build_readme
devtools::build_readme(path="~/gitrepo/code/rprojects/canvasquizzeR/README.md")
devtools::build_readme(path="~/gitrepo/code/rprojects/canvasquizzeR/")
devtools::build_readme()
